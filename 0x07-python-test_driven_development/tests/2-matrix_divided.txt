Test for module 2-matrix_divided.py

The function matrix_divied(matrix, div) takes a matrix and an integer with which to divide each element of the matrix
It returns a new matrix of the division without altering the oldmatrix

### Tests  ###

    >>> m = __import__('2-matrix_divided').matrix_divided
    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(ma(matrix, 3))
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

The original matrix is left unchanged


    >>> print(matrix)
    [[1, 2, 3], [4, 5, 6]]

The matrix can contain both integer and floating point numbers

    >>> matrix = [
    ...     [1, -2.2, 3, 4.4, 5],
    ...     [-6.6, 7.00, 8, 9.999, 10]
    ... ]
    >>> print(m(matrix, 3))
    [[0.33, -0.73, 1.0, 1.47, 1.67], [-2.2, 2.33, 2.67, 3.33, 3.33]]


``matrix_divided(..)`` can contains list of list of integer and floats only
it will return TypeError

    >>> matrix = [
    ... ['1', 2],
    ... [3, 'a']
    ... ]
    >>> print(m(matrix, 2))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

the valid must be of the same size 


    >>> matrix = [
    ... [1, 2, 3],
    ... [1, 2]
    ... ]
    >>> print(m(matrix, 3))
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

the div must be a number and not equal 0

    >>> matrix = [
    ... [1, 2],
    ... [3, 4]
    ... ]
    >>> print(m(matrix, "number"))
    Traceback (most recent call last):
    TypeError: div must be a number

div can't equal to 0


    >>> matrix = [
    ... [1, 2],
    ... [2, 3]
    ... ]
    >>> print(m(matrix, 0))
    Traceback (most recent call last):
    ZeroDivisionError: division by zero
